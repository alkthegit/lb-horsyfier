/* В данной модели поиска возможных ходов шахматного коня используется представление множества клеток
шахматной доски как одномерного массива с диапазоном индексов [0; 63].

Нумерация клеток производится змейкой, начиная с нижнего левого угла движением вправо и вверх:

  [63] [  ] [  ] [  ] [  ] [  ] [57] [56] ←
  
→ [48] [  ] [  ] [  ] [  ] [  ] [54] [55]

...

  [15] [  ] [  ] [  ] [  ] [  ] [ 9] [ 8] ←
 
→ [ 0] [ 1] [  ] [  ] [  ] [  ] [  ] [ 7] 
*/

/* Массив всех возможных одномерных сдвигов индекса для вычисления целевого индекса допустимого хода - 
относительно индекса текущей позиции
Например, если конь стоит на клетке С3 (индекс 18, то сдвиг индекса -17 дает индекс позиции допустимого хода равный 18 + (-17) = 1,
что соответствует клетке B1 */
const horseTargetShifts = [-17, -15, -7, -11, 5, 9, 15, 17];

/* 'отображение для перевода буквы из названии клетки на шахматной доске в натуральное число от 1 до 8 */
const LettersValues = new Map([
    ['a', 1],
    ['b', 2],
    ['c', 3],
    ['d', 4],
    ['e', 5],
    ['f', 6],
    ['g', 7],
    ['h', 8],
    ['A', 1],
    ['B', 2],
    ['C', 3],
    ['D', 4],
    ['E', 5],
    ['F', 6],
    ['G', 7],
    ['H', 8],
    [1, 'a'],
    [2, 'b'],
    [3, 'c'],
    [4, 'd'],
    [5, 'e'],
    [6, 'f'],
    [7, 'g'],
    [8, 'h']
]);

class Horsyfier {
    _currentIndex = 0;
    _currentPosition = 'A1'

    get currentPosition() {
        return translateIndexToPositionName(this._currentIndex);
    }

    set currentPosition(value) {
        if (!checkPositionString(value)) {
            throw new Error(`Позиция задается строкой из двух символов вида A3(или а3), получено значение: '${value}'`);
        }

        this._currentIndex = translatePositionNameToIndex(value);
        this._currentPosition = value.toLowerCase();

        console.table({ index: this._currentIndex, position: this._currentPosition });
    }

    getHorseTargets() {
        /*
            Поиск подходящего хода для коня из указанной позиции (соответствующей текущему значению this._currentIndex):
            1) Найти среди элементов массива horseTargetShifts такое подмножество, элементы которого переводят текущий индекс в новый индекс так, чтобы он оставался в диапазоне  [0; 63], то есть такие элементы shift, что:
                0 <= this._currentIndex + shift <= 63
            2) Перевод значений найденных числовых индексов к нормальном виду A1... 
        */

        // список позиций в формате A1... - возвращаемое значение функции
        const targets = [];

        // 1)
        /* const newIndexes = horseTargetShifts.filter(e =>
            (this._currentIndex + e) >= 0 && (this._currentIndex + e) <= 63
        ); */
        const newIndexes = horseTargetShifts
            .map(e => this._currentIndex + e)
            .filter(e => (e >= 0) && (e <= 63));

        console.log(`currentIndex: ${this._currentIndex}`);
        console.log(newIndexes);
        newIndexes.forEach(e => {
            targets.push(
                translateIndexToPositionName(e)
            )
        });

        return targets;
    }
}

function translateIndexToPositionName(index) {
    /* Перевод одномерного индекса на шахматной доске в соответствующее общепринятое двухсимвольное представление - A1 и т.д. 
        1) Вычисляем цифру в обозначении - это номер строки, которая должна соответствовать индексу index
            вычисляется как целая часть от деления (index + 1) на 8; +1 здесь необходим для перевода в систему натуральной координаты (как на доске), тогда как диапазон индекса index - [0; 63];
        2) Вычисляем букву колонки, которая должна соответствовать индексу index
            2.1) Найти величину остаточного смещения - остаток от деления (index+1) на 8; аналогично предыдущему +1 здесь необходим для перевода в систему натуральной координаты (как на доске), тогда как диапазон индекса index - [0; 63];
            2.2) В зависимости от четности строки, соответствующей клетке с индексом index, найти числовой индекс нужной буквы в карте LettersValues. Необходимо считать либо от 1 до 8, либо от 8 до 1 
    */
    // строковое обозначение клетки шахматной доски, привычное название в виде A1 и т.д. - возвращаемое значение функции
    let position;

    // номер строки - цифра в названии клетки (1, 2, ..., 8)
    let digit;

    // колонка на шахматной доске - буква в названии клетки (A, B, ..., H)
    let letter;

    // 1) номер строки (1, 2, ... 8), соответствующей клетке с индексом index
    digit = Math.ceil((index + 1) / 8);

    // 2.1) вычисляем величину остаточного смещения (после извлечения строки) - это просто остаток от деления
    const remainder = (index + 1) % 8;

    // 2.2) дополнительно - если остаток равен нулю, то дополнительного смещения нет, и мы находимся на левом или правом краю доски в зависимости от четности строки digit
    if (remainder === 0) {
        letter = digit % 2 !== 0 ? LettersValues.get(1) : LettersValues.get(8);
    }
    else {
        letter = digit % 2 !== 0 ? LettersValues.get(remainder) : LettersValues.get(8 - remainder + 1);
    }

    positon = `${letter}${digit}`;
    return positon.toUpperCase();
}

function translatePositionNameToIndex(position) {
    /* Вычисление индекса по строковому обозначению клетки на шахматной доске:
        0) Проверка входных данных
        1) Выделяем из строки, обозначающей клетку (аргумент position), цифру и букву (строку и колонку доски соответственно)
        2) По цифре высичляем основное смещение индекса от 0
        3) По букве с учетом четности строки вычисляем добавочное смещение индекса
    */
    let index = 0;
    const pos = position.toString();

    // 0) Проверяем аргумент на соответствие шаблону
    if (!checkPositionString(pos)) {
        throw new Error(`Позиция задается строкой из двух символов вида A3(или а3), получено значение: '${pos}'`);
    }

    // 1) Разбираем аргумент на составные части
    const [letter, digit] = pos.split('');

    // 2) смещение индекса от 0, задаваемое строкой (цифрой - 1, 2 и т.д.) 
    const rowShift = (digit - 1) * 8;

    /*
        3) Вычисляем смещение индекса от 0, задаваемое колонкой (буквой - A, B и т.д.) 
        В зависимости от четности строки, смещение индекса считается:
            - если номер строки - нечетный, то от 0 до 7 (от левого края доски, что соответствует счету в первой строке),
            - если номер строки - четный, то от 7 до 0 (от правого края доски) 
    */
    const columnShift = digit % 2 !== 0 ? LettersValues.get(letter) - 1 : (8 - (LettersValues.get(letter) - 1)) - 1;

    // вычисляем итоговую величину индекса
    index = rowShift + columnShift;

    return index;
}

/*  */
const posTestRegExp = /^[a-h][1-8]$/i;
function checkPositionString(positionString) {
    return posTestRegExp.test(positionString);
}